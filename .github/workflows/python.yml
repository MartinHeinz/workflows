name: Python CI job

# Inputs:
# - Dependency manager (PIP/Poetry)
# - Push destination (Opt., Default to current repo registry)

on:
  workflow_call:
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_callinputs
    inputs:
      PYTHON_VERSION:
        required: false
        type: string
        default: '3.10'
      ENABLE_SONAR:
        required: false
        type: boolean
        default: false
      ENABLE_CODE_CLIMATE:
        required: false
        type: boolean
        default: false
      ENABLE_SLACK:
        required: false
        type: boolean
        default: false
      ENFORCE_PYLINT:
        required: false
        type: boolean
        default: true
      ENFORCE_BLACK:
        required: false
        type: boolean
        default: true
      ENFORCE_FLAKE8:
        required: false
        type: boolean
        default: true
      ENFORCE_BANDIT:
        required: false
        type: boolean
        default: true
      PYLINT_CONFIG:
        required: false
        type: string
        default: ''
      BANDIT_CONFIG:  # Will by default scan `.` if you want to configure it otherwise use `targets` stanza in config file
        required: false
        type: string
        default: ''
    secrets:
      SONAR_TOKEN:
        description: 'SonarCloud project token'
        required: false
      CC_TEST_REPORTER_ID:
        description: 'CodeClimate Test Reported ID'
        required: false
      SLACK_WEBHOOK:
        description: 'Slack webhook URL'
        required: false

jobs:
  python-ci:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write  # Push
      id-token: write  # Cosign - signing the images with GitHub OIDC Token
      security-events: write  # Trivy - write vulnerability report

    steps:
    - uses: actions/checkout@v1

    - uses: actions/setup-python@v1
      with:
        python-version: ${{ inputs.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install cosign
      uses: sigstore/cosign-installer@main

    # TODO Make this work with poetry
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint flake8 bandit pytest
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt;
        elif [ -f poetry.lock ]; then
          poetry install
        elif [-f Pipfile.lock ]; then
          pip install pipenv
          pipenv install
        fi

      # TODO add option for config file
    - name: Run Tests
      run: pytest

    - name: Verify code style (Black)
      uses: psf/black@stable
      with:
        options: "--verbose ${{ inputs.ENFORCE_BLACK && '--check' || '' }}"

    - name: Enforce code style (Flake8)
      # Will find config automatically in `setup.cfg`, `tox.ini`, or `.flake8` - https://flake8.pycqa.org/en/latest/user/configuration.html#configuration-locations
      run: flake8 ${{ inputs.ENFORCE_FLAKE8 && '' || '--exit-zero' }}

    - name: Lint code
      # Will find config automatically in `pylintrc`, `.pylintrc`, `pyproject.toml`, NOT `setup.cfg` - https://pylint.pycqa.org/en/latest/user_guide/run.html#command-line-options
      run: |
        PYLINT_CONDITIONAL_ARGS=()
        if [ -n "${{ inputs.PYLINT_CONFIG }}" ]; then
          PYLINT_CONDITIONAL_ARGS+=( --rcfile=${{ inputs.PYLINT_CONFIG }} )
        fi

        pylint **/*.py  ${{ inputs.ENFORCE_PYLINT && '' || '--exit-zero' }} "${PYLINT_CONDITIONAL_ARGS[@]}"

    - name: Code security check
      # Will find config automatically in `.bandit`, others have to specified with --ini - see https://github.com/PyCQA/bandit/issues/396#issuecomment-475152672
      run: |
        BANDIT_CONDITIONAL_ARGS=()
        if [ -n "${{ inputs.BANDIT_CONFIG }}" ]; then
          BANDIT_CONDITIONAL_ARGS+=( --ini ${{ inputs.BANDIT_CONFIG }} )
        else
          BANDIT_CONDITIONAL_ARGS+=( . )
        fi
        bandit -r ${{ inputs.ENFORCE_BANDIT && '' || '--exit-zero' }} "${BANDIT_CONDITIONAL_ARGS[@]}"

    - name: Send report to CodeClimate
      uses: paambaati/codeclimate-action@v3.0.0
      if: ${{ inputs.ENABLE_CODE_CLIMATE }}
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      with:
        coverageLocations: |
          ${{github.workspace}}/coverage.xml:coverage.py

    - name: SonarCloud scanner
      uses: sonarsource/sonarcloud-github-action@master
      if: ${{ inputs.ENABLE_SONAR }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Get repository for image
      id: get-repo
      run: |
        repo=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
        echo "::set-output name=repo::$repo"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate tags and image meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        # list of Docker images to use as base name for tags
        images: |
           ghcr.io/${{ steps.get-repo.outputs.repo }}
        # TODO Test with `git push tag`
        tags: |
          type=ref,event=tag
          type=sha

    - name: Build image
      uses: docker/build-push-action@v2
      with:
        context: .
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    # TODO - https://github.com/wagoodman/dive
    # TODO Create Task
    # https://github.com/docker/build-push-action/blob/master/docs/advanced/local-registry.md
    - name: Analyze image efficiency
      run: echo "Dive"

    - name: Trivy vulnerability scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/${{ steps.get-repo.outputs.repo }}:${{ steps.meta.outputs.version }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Push container image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}

    - name: Sign the published Docker image
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: cosign sign ghcr.io/${{ steps.get-repo.outputs.repo }}:${{ steps.meta.outputs.version }}

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Prepare content for Slack notification
      if: ${{ inputs.ENABLE_SLACK }}
      id: gen-slack-messages
      run: |
        MESSAGE=""
        TITLE=""
        if [ "${{ job.status }}" = "success" ]; then
          MESSAGE="Job was successful"
          TITLE="Job Success"
        elif [ "${{ job.failure }}" = "success" ]; then
          MESSAGE="Job failed"
          TITLE="Job Failed"
        else
          MESSAGE="Job was cancelled"
          TITLE="Job Cancelled"
        fi
        echo "::set-output name=message::$MESSAGE"
        echo "::set-output name=title::$TITLE"

    # TODO Make it run Always + If Enabled
    - name: Slack notification
      uses: rtCamp/action-slack-notify@v2
      if: ${{ inputs.ENABLE_SLACK }}
      env:
        SLACK_CHANNEL: general
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://github.com/${{ github.actor }}.png?size=48
        SLACK_MESSAGE: ${{ steps.gen-slack-messages.outputs.message }}
        SLACK_TITLE: ${{ steps.gen-slack-messages.outputs.title }}
        SLACK_USERNAME: ${{ github.actor }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
