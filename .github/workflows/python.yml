name: Python CI job

# Inputs:
# - Python version, (Opt., Default '3.10')
# - Dependency manager (PIP/Poetry)
# - Acceptance tests (Boolean)
# - Slack webhook (Opt., Secret)
# - Whether to enforce quality gates, coverage, vulnerabilities, code style...
# - CC, Sonar tokens (Secret)
# - Push destination (Opt., Default to current repo registry)
on:
  workflow_call:
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_callinputs
    secrets:
      SONAR_TOKEN:
        description: 'SonarCloud project token'
        required: false
      CC_TEST_REPORTER_ID:
        description: 'CodeClimate Test Reported ID'
        required: false
      SLACK_WEBHOOK:
        description: 'Slack webhook URL'
        required: false

# TODO Inputs
jobs:
  python-ci:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write  # Cosign - signing the images with GitHub OIDC Token

    steps:
    - uses: actions/checkout@v1

    - uses: actions/setup-python@v1
      with:
        python-version: '3.10'  # TODO Parametrize

    - name: Install cosign
      uses: sigstore/cosign-installer@main

    # TODO Make this work with poetry
    # TODO Conditionally decide whether to use PIP or Poetry - https://docs.github.com/en/actions/learn-github-actions/expressions
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint flake8 bandit pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # TODO add option for config file
    - name: Run Tests
      run: pytest

    # https://black.readthedocs.io/en/stable/integrations/github_actions.html
    - name: Verify code style (Black)
      uses: psf/black@stable
      with:
        # TODO run `check` only if code style is enforced
        options: "--check --verbose"

    - name: Enforce code style (Flake8)
      run: flake8

    # TODO Make config file optional
    - name: Lint code
      run: pylint --rcfile=setup.cfg **/*.py

    # TODO Make config file optional
    - name: Code security check
      run: bandit -r --ini setup.cfg

    # TODO Run if CC_TEST_REPORTER_ID is provided
    - name: Send report to CodeClimate
      uses: paambaati/codeclimate-action@v3.0.0
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      with:
        coverageLocations: |
          ${{github.workspace}}/coverage.xml:coverage.py

    # TODO Run if SONAR_TOKEN (and properties file) is provided
    - name: SonarCloud scanner
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Get repository for image
      id: get-repo
      run: |
        repo=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
        echo "::set-output name=repo::$repo"

    - name: Get tag for image
      id: get-tag
      run: |
        tag=$(echo ${{github.sha}} | cut -c -7)
        echo "::set-output name=tag::$tag"

    - name: Build container image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ghcr.io/${{ steps.get-repo.outputs.repo }}
        tags: latest "${{ steps.get-tag.outputs.tag }}"
        containerfiles: |
          ./Dockerfile
        labels: |
          COMMIT=${{ github.event.head_commit.id }}
          COMMIT_MESSAGE=${{ github.event.head_commit.message }}

    # TODO - https://github.com/wagoodman/dive
    # Create Task
    - name: Analyze image efficiency
      run: echo "Dive"

    - name: Trivy vulnerability scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/${{ steps.get-repo.outputs.repo }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Push container image
      id: push
      uses: redhat-actions/push-to-registry@v2
      with:
        tags: ghcr.io/${{ steps.get-repo.outputs.repo }}:latest ghcr.io/${{ steps.get-repo.outputs.repo }}:${{ steps.get-tag.outputs.tag }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # https://github.com/actions/starter-workflows/blob/main/ci/docker-publish.yml
    - name: Sign the published Docker image
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: cosign sign ghcr.io/${{ steps.get-repo.outputs.repo }}@${{ steps.push.outputs.digest }}

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Slack notification
      uses: rtCamp/action-slack-notify@v2
      if: always()
      env:
        SLACK_CHANNEL: general
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://github.com/${{ github.actor }}.png?size=48
        SLACK_MESSAGE: 'Post Content :rocket:'
        SLACK_TITLE: Successful build  # TODO Make this conditional
        SLACK_USERNAME: ${{ github.actor }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
